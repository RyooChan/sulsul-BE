# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ prod, dev ]
  pull_request:
    branches: [ prod, dev ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    # Actions Sequence
    - uses: actions/checkout@v3
    
    # Set JDK Version
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    # Modify Permission
    - name: Build with Gradle
      run: chmod +x gradlew
      
#     Test application build
#     - name: Test with Gradle 
#       run: ./gradlew test

    # Create application-prod.yml
    - name: create application-prod.yml
      if: contains(github.ref, 'prod')
      run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.PROD_YML }}" > ./application-prod.yml
      shell: bash

    # Create application-dev.yml
    - name: create application-dev.yml
      if: contains(github.ref, 'dev')
      run: |
        cd ./src/main/resources
        touch ./application-dev.yml
        echo "${{ secrets.DEV_YML }}" > ./application-dev.yml
      shell: bash

    # Build Gradle - prod
    - name: Build with Gradle
      if: contains(github.ref, 'prod')
      run: ./gradlew build

    # Build Gradle - dev
    - name: Build with Gradle
      if: contains(github.ref, 'dev')
      run: ./gradlew build

    # Docker build & push to prod
    - name: Docker build & push to prod
      if: contains(github.ref, 'prod')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/sulsul-prod:latest .
          docker push ${{ secrets.DOCKER_REPO }}/sulsul-prod:latest
          
    # Docker build & push to dev
    - name: Docker build & push to dev
      if: contains(github.ref, 'dev')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_REPO }}/sulsul-dev:latest .
          docker push ${{ secrets.DOCKER_REPO }}/sulsul-dev:latest
      
#     # Deploy to prod
#     - name: Deploy to prod
#       uses: appleboy/ssh-action@master
#       id: deploy-prod
#       if: contains(github.ref, 'prod')
#       with:
#           host: ${{ secrets.HOST_PROD }}
#           username: ec2-user
#           key: ${{ secrets.PRIVATE_KEY_PROD }}
#           envs: GITHUB_SHA
#           script: |
#               sudo docker rm -f $(docker ps -qa)
#               sudo docker pull ${{ secrets.DOCKER_REPO }}/sulsul-prod
#               docker run -d -p --name prod 8080:8080 ${{ secrets.DOCKER_REPO }}/sulsul-prod:latest
 
#     # Deploy to dev
#     - name: Deploy to dev
#       uses: appleboy/ssh-action@master
#       id: deploy-dev
#       if: contains(github.ref, 'dev')
#       with:
#           host: ${{ secrets.HOST_DEV }}
#           username: ec2-user
#           key: ${{ secrets.PRIVATE_KEY_DEV }}
#           envs: GITHUB_SHA
#           script: |
#               sudo docker rm -f $(docker ps -qa)
#               sudo docker pull ${{ secrets.DOCKER_REPO }}/sulsul-dev
#               docker run -d -p --name dev 80:8080 ${{ secrets.DOCKER_REPO }}/sulsul-dev:latest
 
